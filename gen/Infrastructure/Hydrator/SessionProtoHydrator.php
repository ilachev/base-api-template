<?php

/**
 * This file is auto-generated. DO NOT EDIT.
 *
 * Generated by protoc-php-gen
 */

declare(strict_types=1);

namespace App\Infrastructure\Hydrator;

use App\Api\V1\Session as V1Session;
use App\Domain\Session\Session as SessionSession;

final class SessionProtoHydrator
{
    /**
     * Convert Session message to Session entity.
     *
     * @param V1Session $proto Proto message
     * @return SessionSession Domain entity
     */
    public function hydrate(\V1Session $proto): \SessionSession
    {
        return new SessionSession(
            $proto->getId(), // id,
            $proto->getUserId(), // userId,
            json_decode($proto->getPayload(), true), // payload,
            new \DateTime('@' . $proto->getExpiresAt()), // expiresAt,
            new \DateTime('@' . $proto->getCreatedAt()), // createdAt,
            new \DateTime('@' . $proto->getUpdatedAt()), // updatedAt
        );
    }

    /**
     * Convert Session entity to Session message.
     *
     * @param SessionSession $entity Domain entity
     * @return V1Session Proto message
     */
    public function extract(\SessionSession $entity): \V1Session
    {
        $proto = new V1Session();

        $proto->setId($entity->id);
        $proto->setUserId($entity->userId);
        $proto->setPayload($entity->payload !== null ? json_encode($entity->payload) : null);
        $proto->setExpiresAt($entity->expiresAt instanceof \DateTimeInterface ? $entity->expiresAt->getTimestamp() : 0);
        $proto->setCreatedAt($entity->createdAt instanceof \DateTimeInterface ? $entity->createdAt->getTimestamp() : 0);
        $proto->setUpdatedAt($entity->updatedAt instanceof \DateTimeInterface ? $entity->updatedAt->getTimestamp() : 0);

        return $proto;
    }
}
