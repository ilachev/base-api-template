<?php

/**
 * This file is auto-generated. DO NOT EDIT.
 *
 * Generated by protoc-php-gen
 */

declare(strict_types=1);

namespace App\Infrastructure\Hydrator;

use App\Api\V1\SessionPayload as V1SessionPayload;
use App\Domain\Session\SessionPayload as SessionSessionPayload;

final class SessionPayloadProtoMapper
{
    /**
     * Convert SessionPayload message to SessionPayload entity.
     *
     * @param V1SessionPayload $proto Proto message
     * @return SessionSessionPayload Domain entity
     */
    public function hydrate(\V1SessionPayload $proto): \SessionSessionPayload
    {
        return new SessionSessionPayload(
            $proto->getIp(), // ip,
            $proto->getUserAgent(), // userAgent,
            $proto->getAcceptLanguage(), // acceptLanguage,
            $proto->getAcceptEncoding(), // acceptEncoding,
            $proto->getXForwardedFor(), // xForwardedFor,
            $proto->getReferer(), // referer,
            $proto->getOrigin(), // origin,
            $proto->getSecChUa(), // secChUa,
            $proto->getSecChUaPlatform(), // secChUaPlatform,
            $proto->getSecChUaMobile(), // secChUaMobile,
            $proto->getDnt(), // dnt,
            $proto->getSecFetchDest(), // secFetchDest,
            $proto->getSecFetchMode(), // secFetchMode,
            $proto->getSecFetchSite(), // secFetchSite,
            json_decode($proto->getGeoLocation(), true), // geoLocation
        );
    }

    /**
     * Convert SessionPayload entity to SessionPayload message.
     *
     * @param SessionSessionPayload $entity Domain entity
     * @return V1SessionPayload Proto message
     */
    public function extract(\SessionSessionPayload $entity): \V1SessionPayload
    {
        $proto = new V1SessionPayload();

        $proto->setIp($entity->ip);
        $proto->setUserAgent($entity->userAgent);
        $proto->setAcceptLanguage($entity->acceptLanguage);
        $proto->setAcceptEncoding($entity->acceptEncoding);
        $proto->setXForwardedFor($entity->xForwardedFor);
        $proto->setReferer($entity->referer);
        $proto->setOrigin($entity->origin);
        $proto->setSecChUa($entity->secChUa);
        $proto->setSecChUaPlatform($entity->secChUaPlatform);
        $proto->setSecChUaMobile($entity->secChUaMobile);
        $proto->setDnt($entity->dnt);
        $proto->setSecFetchDest($entity->secFetchDest);
        $proto->setSecFetchMode($entity->secFetchMode);
        $proto->setSecFetchSite($entity->secFetchSite);
        $proto->setGeoLocation($entity->geoLocation !== null ? json_encode($entity->geoLocation) : null);

        return $proto;
    }
}
