version: '3'

vars:
  PROTO_DIR: protos/proto
  SDK_GEN_DIR: protos/gen
  DOCS_GEN_DIR: docs
  PHP: php
  COMPOSER: composer

tasks:
  install:
    desc: Install project dependencies
    cmd: "{{.COMPOSER}} install"
    sources:
      - composer.json
    generates:
      - vendor/autoload.php

  var:
    cmd: mkdir -p var
    status:
      - test -d var
    silent: true
    internal: true

  fixcs:
    desc: Fix code style issues
    deps: [ var, install ]
    cmds:
      - "PHP_CS_FIXER_IGNORE_ENV=true {{.PHP}} vendor/bin/php-cs-fixer fix --verbose {{.CLI_ARGS}}"

  lint:
    desc: Check code style (dry-run)
    cmds:
      - task: fixcs
        vars:
          CLI_ARGS: "--dry-run {{.CLI_ARGS}}"

  verify:
    desc: Run all verification steps (lint, phpstan, tests)
    deps: [ var, install, lint, phpstan, cache:clear, test ]

  phpstan:
    desc: Run static analysis
    deps: [ var, install ]
    cmds:
      - "{{.PHP}} vendor/bin/phpstan analyse --memory-limit=256M {{.CLI_ARGS}}"

  cache:clear:
    desc: Clear application cache
    deps: [ var, install ]
    cmds:
      - "{{.PHP}} bin/cache-clear.php"

  test:
    desc: Run unit and integration tests
    deps: [ var, install, cache:clear ]
    cmds:
      - "{{.PHP}} vendor/bin/phpunit --colors=never {{.CLI_ARGS}}"

  proto:gen:sdk:
    desc: Generate PHP SDK classes from proto files
    cmds:
      - rm -rf {{.SDK_GEN_DIR}}/*
      - >
        protoc -I={{.PROTO_DIR}}
        --php_out={{.SDK_GEN_DIR}}
        --php_opt=aggregate_metadata
        {{.PROTO_DIR}}/app/v1/*.proto
        {{.PROTO_DIR}}/google/api/*.proto

  proto:gen:docs:
    desc: Generate OpenAPI spec from proto files
    cmds:
      - rm -rf {{.DOCS_GEN_DIR}}/*
      - >
        protoc -I={{.PROTO_DIR}}
        --openapiv2_out=logtostderr=true:{{.DOCS_GEN_DIR}}
        --openapiv2_opt=json_names_for_fields=true,allow_merge=true,merge_file_name=api
        {{.PROTO_DIR}}/app/v1/*.proto
       
  proto:gen:routes:
    desc: Generate routes from proto definitions
    deps: [ var, install ]
    cmds:
      - "{{.PHP}} bin/generate-routes.php"
      

  proto:gen:hydrators:
    desc: Generate hydrators from PHP attributes in domain classes
    deps: [ tools:proto:setup ]
    cmds:
      - mkdir -p gen/Infrastructure/Hydrator
      - "{{.PHP}} tools/protoc-php-gen/bin/generate-hydrators.php"

  proto:gen:all:
    desc: Generate all artifacts from proto files and attributes
    deps: [ proto:gen:sdk, proto:gen:docs, proto:gen:routes, proto:gen:hydrators ]

  tools:proto:setup:
    desc: Setup protoc-php-gen plugin
    cmds:
      - cd tools/protoc-php-gen && {{.COMPOSER}} install
      - chmod +x tools/protoc-php-gen/bin/protoc-php-gen.php
      - echo "Proto code generator setup complete"

  tools:proto:lint:
    desc: Run PHP-CS-Fixer on the protoc-php-gen library
    cmds:
      - cd tools/protoc-php-gen && {{.COMPOSER}} cs

  tools:proto:fixcs:
    desc: Fix code style issues in the protoc-php-gen library
    cmds:
      - cd tools/protoc-php-gen && {{.COMPOSER}} cs-fix

  tools:proto:phpstan:
    desc: Run PHPStan on the protoc-php-gen library
    cmds:
      - cd tools/protoc-php-gen && {{.COMPOSER}} phpstan

  tools:proto:test:
    desc: Run PHP-CS-Fixer on the protoc-php-gen library
    cmds:
      - cd tools/protoc-php-gen && {{.COMPOSER}} test

  tools:proto:check:
    desc: Run all code quality checks on the protoc-php-gen library
    cmds:
      - cd tools/protoc-php-gen && {{.COMPOSER}} check

  # Задачи для производительности
  perf:test:
    desc: Run single performance test
    deps: [ var, install ]
    cmds:
      - k6 run load-tests/scenarios/{{.CLI_ARGS | default "home.js"}}

  perf:test:all:
    desc: Run all performance tests
    deps: [ var, install ]
    cmds:
      - for f in load-tests/scenarios/*.js; do k6 run "$f"; done

  services:start:
    desc: Start all application services
    cmds:
      - docker compose up -d
      - echo "Waiting for services to be ready..."
      - for i in $(seq 1 10); do
          if docker compose exec -T db-postgres pg_isready -U app >/dev/null 2>&1; then
            echo "Database is ready!";
            break;
          fi;
          echo "Services not ready yet, retrying in 1 second...";
          sleep 1;
        done
      - task: migrate
        
  migrate:
    desc: Run database migrations
    deps: [ var, install ]
    cmds:
      - "{{.PHP}} bin/migrate.php"

  services:stop:
    desc: Stop all application services
    cmds:
      - docker compose stop

  services:status:
    desc: Check the status of all application services
    cmds:
      - docker compose ps
      
  run:
    desc: Start all required services and run the application with RoadRunner
    deps: [ services:start ]
    cmds:
      - echo "Starting application with RoadRunner on http://localhost:8080..."
      - rr serve -c .rr.yaml
